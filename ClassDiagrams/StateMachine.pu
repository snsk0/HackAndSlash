@startuml StateMachine

namespace snk{
    class StateMachine
    abstract class StateBase
    class ParentState

    StateMachine-->StateBase
    StateBase<|--ParentState
    ParentState-->StateMachine
}

namespace kami{
    class StateMachineManager{
        StateMachineFactory stateMachineFactory
        IEnumalable<StateMachine> instancedStateMachines
        void ProcessStateMachine()
    }
    class StateMachineFactory{
        IObsrervable<StateMachineController> createdControllerObservable
        void CreateStateMachine(StateMachine stateMachine)
    }
    abstract class BaseState{
        List<Transition> transitionList
        Blackboard blackboard
        void FinishState()
    }
    class StateMachine{
        List<TransitionList> transitionList
        StateMachine subStateMachine
        BaseState entryState
        BaseState currentState
        Blackboard blackboard
        void CheckTransition()
        void ChangeState()
    }
    class StateMachineController{
        StateMachine useStateMachine
    }
    class Transition{
        BaseState nextState
        Func<BlackboardKeyType, bool> CanTransition
    }
    class Blackboard{
        Dictionary<BlackboardKeyType, Object> keyDictionary
    }
    enum BlackboardKeyType

    StateMachineManager-->StateMachineFactory
    StateMachineManager-->StateMachine
    StateMachineController-->StateMachineFactory

    StateMachineController-->StateMachine
    StateMachine-->StateMachine
    StateMachine-->BaseState
    StateMachine-->Transition
    StateMachine-->Blackboard
    BaseState-->Transition
    BaseState-->Blackboard
}

@enduml